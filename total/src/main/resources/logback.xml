<?xml version="1.0" encoding="UTF-8"?>
<!--debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration debug="false">

    <!-- 定义后可以通过 ${LOG_HOME}方式引用属性值
     定义日志文件的存储地址，勿在LogBack的配置中使用相对路径，${user.home}代表系统根目录 Linux下路径在/root/logs/total/....-->
    <property name="LOG_HOME" value="${user.home}/logs/total/"/>

    <!--获取时间戳  2020-2-27  ${timePattern}方式引用属性值
    两个属性 key:标识此<timestamp> 的名字；
    datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。-->
    <timestamp key="timePattern" datePattern="yyyyMMdd'T'HHmmss"/>


    <!--logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。
        appender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。
        layout 负责把事件转换成字符串，格式化的日志信息的输出。-->
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %green([%thread]) %highlight(%-5level) %cyan(%logger{50}) - %msg%n
            </pattern>
            <!--<charset>UTF-8</charset>--><!-- 这里无需指定utf-8编码，否则在程序在linux系统，能正常打印日志，在windows系统下控制台日志输出乱码-->
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- 配置mybatis日志打印信息打印sql语句   三个属性
     name:用来指定受此loger约束的某一个包或者具体的某一个类。
     level:用来设置打印级别（日志级别），大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
     还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:是否向上级loger传递打印信息。默认是true。
        <loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
        -->
    <logger name="com.wyfx.total.mapper" level="Debug"/>

    <!-- 日志输出级别
     也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
    <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>